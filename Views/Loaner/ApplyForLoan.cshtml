@model StrongHelpOfficial.Models.ApplyForLoanViewModel
@{
    ViewData["Title"] = "Apply For Loan";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userId = ViewData["UserID"];
    var roleName = ViewData["Email"];
    var documentCount = ViewData["DocumentCount"];
    var hasExistingLoan = ViewData["HasExistingLoan"] as bool? ?? false;
    var existingLoanId = ViewData["ExistingLoanId"] as int?;
}

@{
    var loanJustSubmitted = TempData["LoanJustSubmitted"] as bool? ?? false;
}

@if (loanJustSubmitted)
{
    <div class="alert alert-success text-center mt-5">
        <h4>Your loan application has been submitted!</h4>
        <p>You can now track your application status.</p>
        <a class="blue-btn mt-3"
           href="@Url.Action("Index", "MyApplication", new { area = "Loaner" })">
            <i class="bi bi-list-ul me-2"></i>View My Loan Details
        </a>
    </div>
    return;
}
else if (hasExistingLoan && existingLoanId != null)
{
    <div class="alert alert-warning text-center mt-5">
        <h4>You cannot apply for multiple loans.</h4>
        <p>Would you like to see the details of your loan instead?</p>
        <a class="blue-btn mt-3"
           href="@Url.Action("Index", "MyApplication", new { area = "Loaner" })">
            <i class="bi bi-list-ul me-2"></i>View My Loan Details
        </a>
    </div>
    return;
}

@if (TempData["failedSubmitResult"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["failedSubmitResult"]
    </div>
}

@section Styles {
    <link rel="stylesheet" href="~/css/LoanerDashboard.css" asp-append-version="true" />
}
<h2>Employee Salary Loan</h2>
<p class="text-muted mb-4">Hello @roleName! Upload required documents to submit your loan application</p>

<div class="afl-content">
    <div class="row">
        <div class="col-md-8 mb-3">
            <form asp-controller="ApplyForLoan" asp-action="UploadDocuments" method="post" enctype="multipart/form-data">
                <label for="loanAmount" class="form-label fw-bold mb-1">Loan Amount</label>
                <input class="form-control" type="number" asp-for="LoanAmount" id="loanAmount" placeholder="Enter amount">
                <span asp-validation-for="LoanAmount" class="text-danger"></span>

                <!-- Modal-like box for displaying the requested amount -->
                <div id="loanAmountModalBox" class="alert alert-info mt-3" style="display:none; max-width:350px;">
                    <strong>Your requested loan amount:</strong>
                    <div id="loanAmountDisplay" class="fs-4 mt-2"></div>
                </div>
                <br>
                <div class="upload-container">
                    <h4>Document Upload</h4>
                    <p class="text-muted mb-4">
                        Please upload all required documents to process your application
                    </p>
                    <div class="info-box mb-4">
                        <i class="bi bi-exclamation-circle-fill text-primary fs-4"></i>
                        <div>
                            <h6 class="mb-1">Important</h6>
                            <p class="mb-0">Please ensure all documents are clear, legible, and in PDF format.<br>Documents must be recent and valid</p>
                        </div>
                    </div>
                    <div class="mb-4">
                        <div class="mb-4">
                            <div id="drop-area" class="drop-area rounded p-4 text-center text-muted" onclick="document.getElementById('files').click();">
                                Drop files here or click to select
                                <input type="file" accept=".pdf,application/pdf" id="files" name="Files" hidden multiple>
                                <input type="hidden" id="LoanDocumentName" name="LoanDocumentName" value="@Model.LoanDocumentName" />
                                <input type="hidden" id="FileContent" name="FileContent" value="@Model.Filecontent" />
                            </div>
                        </div>
                        <script>
                            let allFiles = [];
                            document.getElementById('files').addEventListener('change', function (event) {
                                const newFiles = Array.from(event.target.files);
                                let invalid = false;
                                for (const file of newFiles) {
                                    if (file.type !== "application/pdf" && !file.name.toLowerCase().endsWith('.pdf')) {
                                        invalid = true;
                                        break;
                                    }
                                }
                                if (invalid) {
                                    alert("Please upload only PDF files.");
                                    event.target.value = ""; // Clear the input
                                    return;
                                }
                                for (const file of newFiles) {
                                    if (!allFiles.some(f => f.name === file.name && f.size === file.size && f.lastModified === file.lastModified)) {
                                        allFiles.push(file);
                                    }
                                }
                                renderFileList();
                                updateFileInput();
                            });
                            function renderFileList() {
                                const submittedDocs = document.getElementById('submittedDocs');
                                submittedDocs.innerHTML = '<strong class="d-block mb-2">Submitted Documents:</strong>';
                                allFiles.forEach((file, idx) => {
                                    const docItem = document.createElement('div');
                                    docItem.className = 'doc-item d-flex align-items-center justify-content-between';
                                    const input = document.createElement('input');
                                    input.type = 'text';
                                    input.value = file.name;
                                    input.readOnly = true;
                                    input.className = 'form-control';
                                    const deleteBtn = document.createElement('button');
                                    deleteBtn.type = 'button';
                                    deleteBtn.className = 'btn btn-danger btn-sm ms-2';
                                    deleteBtn.innerHTML = '<i class="bi bi-x"></i> Delete';
                                    deleteBtn.onclick = function () {
                                        allFiles.splice(idx, 1);
                                        renderFileList();
                                        updateFileInput();
                                    };
                                    docItem.appendChild(input);
                                    docItem.appendChild(deleteBtn);
                                    submittedDocs.appendChild(docItem);
                                });
                                // Update document count display
                                document.getElementById('documentCountDisplay').textContent = `${allFiles.length}/3 submitted`;
                            }
                            function updateFileInput() {
                                const fileInput = document.getElementById('files');
                                const dt = new DataTransfer();
                                allFiles.forEach(file => dt.items.add(file));
                                fileInput.files = dt.files;
                            }
                        </script>
                    </div>
                    <div id="submittedDocs" class="border rounded p-3">
                        <strong class="d-block mb-2">Submitted Documents:</strong>
                    </div>
                    <br />

                    <!-- Co-maker field box start -->
                    <div class="co-maker-box border rounded p-4 mb-4" style="background-color: #f8f9fa;">
                        <h5 class="mb-3 co-maker-title">Add a Co-maker<span class="text-danger">*</span></h5>
                        <div class="co-maker-input-group" style="position:relative;">
                            <input type="text" class="form-control" id="CoMakerName" name="CoMakerName" placeholder="Your co-maker" autocomplete="off" />
                            <input type="hidden" id="CoMakerId" name="CoMakerId" />
                            <div id="coMakerSuggestions" class="list-group"></div>
                        </div>
                        <button type="button" class="action-btn secondary w-25 mt-2" id="setCoMakerBtn">Set as co-maker</button>
                        <div id="coMakerSuccess" class="co-maker-success mt-2" style="display:none;"></div>
                    </div>
                    <!-- Co-maker field box end -->

                </div>
                <br />
                <input class="action-btn primary w-100" type="submit" value="Submit loan" />
            </form>
        </div>
        <div class="col-md-4">
            <div class="guideline-box">
                <h3>Loan Information</h3>
                <p class="mb-3 fc-gray">
                    Important details about our loan offerings and requirements
                </p>
                <p class="mb-1 fw-bold">
                    Required Documents
                </p>
                @if (Model.RequiredDocuments != null && Model.RequiredDocuments.Any())
                {
                    @foreach (var doc in Model.RequiredDocuments)
                    {
                        <p class="mb-0"> • @doc</p>
                    }
                }
                else
                {
                    <p class="mb-0"> • Latest 2 months payslip</p>
                    <p class="mb-0"> • Certificate of Employment</p>
                    <p class="mb-0"> • Valid government-issued ID</p>
                    <p class="mb-0"> • Signed authorization letter from Co-maker</p>
                }
            </div>
        </div>
    </div>
    <div class="submissions-box mb-3">
        <div class="info-item">
            <i class="bi bi-file-earmark-text fs-4 text-secondary"></i>
            <span class="info-text1" id="documentCountDisplay">0/3 submitted</span>
        </div>
        <div class="info-item">
            <i class="bi bi-people-fill fs-4 text-secondary"></i>
            <strong>Co-maker status:</strong>
            <span id="coMakerStatusLabel">@ViewData["CoMakerStatus"]</span>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        let selectedCoMakerId = null;
        let selectedCoMakerName = "";

        const coMakerNameInput = document.getElementById('CoMakerName');
        const coMakerIdInput = document.getElementById('CoMakerId');
        const coMakerSuggestions = document.getElementById('coMakerSuggestions');
        const setCoMakerBtn = document.getElementById('setCoMakerBtn');
        const coMakerSuccess = document.getElementById('coMakerSuccess');

        if (!coMakerNameInput) return; // Prevents error if element is missing

        coMakerNameInput.addEventListener('input', function() {
            const term = this.value;
            if (term.length < 2) {
                coMakerSuggestions.innerHTML = "";
                return;
            }
            fetch(`/Loaner/ApplyForLoan/SearchUsers?term=${encodeURIComponent(term)}`)
                .then(res => res.json())
                .then(data => {
                    let html = "";
                    data.forEach(user => {
                        html += `<button type="button" class="list-group-item list-group-item-action" onclick="selectCoMaker('${user.userId}', '${user.name.replace(/'/g, "\\'")}')">${user.name}</button>`;
                    });
                    coMakerSuggestions.innerHTML = html;
                });
        });

        window.selectCoMaker = function(userId, name) {
            coMakerNameInput.value = name;
            coMakerIdInput.value = userId;
            selectedCoMakerId = userId;
            selectedCoMakerName = name;
            coMakerSuggestions.innerHTML = "";
        };

        setCoMakerBtn.addEventListener('click', function() {
            if (selectedCoMakerId && selectedCoMakerName) {
                coMakerSuccess.style.display = "block";
                coMakerSuccess.textContent = `${selectedCoMakerName} is currently chosen as co-maker`;

                // Update the status label below
                const statusLabel = document.getElementById('coMakerStatusLabel');
                if (statusLabel) {
                    statusLabel.textContent = selectedCoMakerName;
                }
            } else {
                coMakerSuccess.style.display = "none";
                alert("Please select a co-maker from the list.");
            }
        });

        // Hide suggestions when clicking outside
        document.addEventListener('click', function(event) {
            const box = document.querySelector('.co-maker-box');
            if (box && !box.contains(event.target)) {
                coMakerSuggestions.innerHTML = "";
            }
        });
    });

    let coMakerResults = [];
    let selectedCoMaker = null;

    // Always hide Show More on page load
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('documentCountDisplay').textContent = `${allFiles.length}/3 submitted`;
    });

    function renderCoMakerTable(data, isShowMore) {
        let html = `<table class="table table-bordered align-middle">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Department</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>`;
        if (data.length === 0) {
            html += `<tr><td colspan="3" class="text-center">No matching users found.</td></tr>`;
        } else {
            data.forEach(user => {
                html += `<tr>
                    <td>${user.name}</td>
                    <td>${user.department}</td>
                    <td>
                        <button type="button" class="btn btn-success btn-sm" onclick="addCoMaker('${user.userId}', '${user.name}');${isShowMore ? "bootstrap.Modal.getInstance(document.getElementById('showMoreModal')).hide();" : ""}">Add as co-maker</button>
                    </td>
                </tr>`;
            });
        }
        html += `</tbody></table>`;
        if (isShowMore) {
            document.getElementById('showMoreModalBody').innerHTML = html;
        } else {
            document.getElementById('coMakerTableContainer').innerHTML = html;
        }
    }
    // Loan amount modal logic
    document.addEventListener('DOMContentLoaded', function () {
        const loanAmountInput = document.getElementById('loanAmount');
        const modalBox = document.getElementById('loanAmountModalBox');
        const display = document.getElementById('loanAmountDisplay');

        loanAmountInput.addEventListener('input', function () {
            const value = parseFloat(this.value);
            if (!isNaN(value) && value > 0) {
                // Format as PHP currency
                display.textContent = 'PHP ' + value.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                modalBox.style.display = 'block';
            } else {
                modalBox.style.display = 'none';
            }
        });
    });
</script>


<style>
    .custom-row {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: center;
        background-color: #f0f0f0;
        padding: 5px;
        border-radius: 5px;
    }

    .custom-highlight {
        background-color: #100899;
        color: white;
    }

    .custom-outline {
        background-color: transparent;
        color: gray;
    }

        .custom-highlight:hover,
        .custom-outline:hover {
            background-color: inherit !important;
            color: inherit !important;
            border-color: inherit !important;
        }

    .guideline-box {
        border: 1px solid #ccc;
        background-color: transparent;
        padding: 2rem;
        border-radius: 0.5rem;
        height: auto;
    }

    .fc-gray {
        color: gray;
    }

    .upload-container {
        border: 1px solid #ccc;
        border-radius: 0.5rem;
        padding: 1.5rem;
    }

    .info-box {
        background-color: #e7f1ff;
        border: 1px solid #0d6efd;
        border-radius: 0.5rem;
        padding: 1rem;
        color: #0d6efd;
        display: flex;
        align-items: start;
        gap: 1rem;
    }

    .submissions-box {
        border: 1px solid #ced4da;
        border-radius: 0.75rem;
        padding: 1rem 1.5rem;
        background-color: #f8f9fa;
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        gap: 1rem;
    }

    .info-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .info-text {
        font-weight: 500;
    }

    .info-text1 {
        font-weight: 500;
    }

    .drop-area {
        border: 2px dashed #6c757d;
        padding: 1.5rem;
        border-radius: 0.5rem;
        text-align: center;
        color: #6c757d;
        cursor: pointer;
    }

        .drop-area.dragover {
            background-color: #e2e6ea;
        }

    .submitted-docs {
        border: 1px solid #ccc;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-top: 1rem;
    }

    .doc-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.5rem;
    }

        .doc-item input {
            flex: 1;
        }

    .blue-btn {
        background-color: #100899 !important; /* matches your custom-highlight blue */
        color: #fff !important;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 0.375rem;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: background 0.2s;
        text-decoration: none;
    }
    .blue-btn:hover, .blue-btn:focus {
        background-color: #0a0666 !important;
        color: #fff !important;
        text-decoration: none;
    }

    .co-maker-box {
        position: relative;
        background: #f8f9fa;
    }

    .co-maker-input-group {
        position: relative;
    }

    #CoMakerName {
        margin-bottom: 0;
        z-index: 2;
        position: relative;
    }

    #coMakerSuggestions {
        position: absolute;
        top: calc(100% + 0.25rem); /* just below the input */
        left: 0;
        width: 100%;
        z-index: 10;
        background: #fff;
        border: 1px solid #ced4da;
        border-radius: 0 0 0.5rem 0.5rem;
        max-height: 200px;
        overflow-y: auto;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
    }

    .co-maker-success {
        width: 100%;
        background: #d1e7dd;
        color: #0f5132;
        border: 1px solid #badbcc;
        border-radius: 0.375rem;
        padding: 0.75rem 1rem;
        font-weight: 500;
        margin-top: 0.5rem;
        text-align: center;
    }
</style>
