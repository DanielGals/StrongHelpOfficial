@model ApproverApplicationDetailsViewModel
@{
    ViewData["Title"] = "Approval Flow";
    ViewBag.IdParamName = "id";
    ViewBag.LoanID = Model.LoanID;
    ViewBag.Status = Model.ApplicationStatus;
    ViewBag.TabArea = "";
}
@section Styles {
    <link rel="stylesheet" href="~/css/LoanApplicationDetails.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/MyApplication.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/ApproverApprovalFlow.css" asp-append-version="true" />
}
<div class="row">
    <div class="col-md-8">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
            <div>
                <h2 class="fw-bold mb-1">Approval Flow</h2>
                <div class="text-muted mb-2" style="font-size:1em;">Review and approve this loan application</div>
            </div>
        </div>
        @await Html.PartialAsync("_LoanApplicationTabs")

        <!-- Application Status Card -->
        @if (Model.ApplicationStatus == "In Review")
        {
            <div class="alert alert-info">
                <div class="icon">ℹ️</div>
                <div>
                    <strong>Application Ready for Review</strong><br />
                    This application has been submitted and is ready for your approval.
                </div>
            </div>
        }
        else if (Model.ApplicationStatus == "Approved")
        {
            <div class="alert alert-success">
                <div class="icon">✅</div>
                <div>
                    <strong>Application Approved</strong><br />
                    This application has been approved successfully.
                </div>
            </div>
        }



        <!-- Approval Flow Section -->
        <h5 class="fw-bold mb-3">Application Approval Flow</h5>
        @if (Model.Approvers != null && Model.Approvers.Any())
        {
            foreach (var approver in Model.Approvers.OrderBy(a => a.Order))
            {
                var isBenefitsAssistant = approver.RoleName == "Benefits Assistant";
                var isApproved = approver.Status == "Approved" || (isBenefitsAssistant && approver.Status == "Reviewed");
                var isRejected = approver.Status == "Rejected";
                var isPending = !isApproved && !isRejected;

                <div class="approval-card mb-3" style="background: #fff; border-radius: 8px; box-shadow: 0 2px 8px #0001; padding: 1.5rem;">
                    <div class="approval-card-title d-flex align-items-center mb-1" style="font-size:1.25em;">
                        @if (isApproved)
                        {
                            <span class="status-dot approved">
                                <svg viewBox="0 0 16 16"><polyline points="12 5 7 10 4 7" /></svg>
                            </span>
                        }
                        else if (isRejected)
                        {
                            <span class="status-dot rejected">
                                <svg viewBox="0 0 16 16"><line x1="5" y1="5" x2="11" y2="11"></line><line x1="11" y1="5" x2="5" y2="11"></line></svg>
                            </span>
                        }
                        else
                        {
                            <span class="status-dot pending">
                                <svg viewBox="0 0 16 16"><circle cx="8" cy="8" r="6" /><path d="M8 4v4l2 2" /></svg>
                            </span>
                        }
                        <span>@approver.RoleName</span>
                    </div>
                    <div class="approval-card-subtitle mb-2" style="color: #888;">
                        @if (isBenefitsAssistant)
                        {
                            @(approver.Description == "Waiting for approvers" ? "Application reviewed" : approver.Description)
                        }
                        else
                        {
                            @approver.Description
                        }
                    </div>
                    <div class="approval-card-content">
                        <div><strong>User:</strong> <span style="color:#218838">@approver.UserName</span></div>
                        @if (!isBenefitsAssistant)
                        {
                            <div><strong>Order:</strong> <span style="color:#218838">@approver.Order</span></div>
                        }
                        <div><strong>Department:</strong> <span style="color:#218838">@(isBenefitsAssistant ? "Benefits Assistant" : approver.RoleName)</span></div>
                    </div>
                    
                    @{
                        // Only show documents for this approver
                        var approverDocs = Model.ApproverDocuments?.Where(d => d.LoanApprovalID == approver.LoanApprovalID).ToList();
                    }
                    @if (approverDocs != null && approverDocs.Any())
                    {
                        <div class="mt-3">
                            <div class="fw-bold mb-2" style="font-size:1.05em;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="#d63384" viewBox="0 0 24 24" style="vertical-align:middle;margin-right:0.5em;">
                                    <path d="M6 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8.828A2 2 0 0 0 19.414 7.414l-4.828-4.828A2 2 0 0 0 12.172 2H6zm6 1.414L18.586 10H14a2 2 0 0 1-2-2V3.414zM6 4h6v4a4 4 0 0 0 4 4h4v8a1 1 0 0 1-1 1H6a1 1 0 0 1-1-1V4z"/>
                                </svg>
                                Attached Documents
                            </div>
                            <div class="list-group list-group-flush">
                                @foreach (var doc in approverDocs)
                                {
                                    <a href="javascript:void(0);" class="list-group-item list-group-item-action d-flex align-items-center gap-2 doc-view-btn"
                                       data-doc-url="@Url.Action("DownloadDocument", "ApproverApplicationDetails", new { id = doc.LoanDocumentID })"
                                       data-doc-type="@doc.Type"
                                       data-doc-name="@doc.Name"
                                       style="border-radius:6px; transition: background 0.2s;">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="#e63946" viewBox="0 0 24 24">
                                            <path d="M6 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2-2V8.828A2 2 0 0 0 19.414 7.414l-4.828-4.828A2 2 0 0 0 12.172 2H6zm6 1.414L18.586 10H14a2 2 0 0 1-2-2V3.414z"/>
                                        </svg>
                                        <span class="text-primary text-break">@doc.Name</span>
                                    </a>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        }
        else
        {
            <div class="alert alert-info">
                No approvers have been assigned to this application yet.
            </div>
        }
        
    </div>
    <!-- Approval Actions: right side -->
    <div class="col-md-4">
        @if (Model.ApplicationStatus == "In Review")
        {
            <div class="sticky-top" style="top: 80px;">
                <div class="card shadow-sm" style="border-radius: 10px;">
                    <div class="card-body">
                        <h5 class="fw-bold mb-3">Application Decision</h5>
                        <div class="alert alert-yellow">
                            <div class="icon">⚠️</div>
                            <div>
                                <strong>Review Required</strong><br />
                                Please review all documents and provide your decision on this loan application.
                            </div>
                        </div>
                        <div class="action-buttons mb-3">
                            <button type="button" class="btn btn-success btn-burger w-100 mb-2" id="approveApplicationBtn">
                                Approve Application
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-burger w-100" id="rejectApplicationBtn">
                                Reject Application
                            </button>
                        </div>
                        <!-- Reject comment section (initially hidden) -->
                        <div id="rejectCommentContainer" style="display:none;" class="mt-3">
                            <label for="rejectCommentBox" class="form-label">Reason for rejection:</label>
                            <textarea class="form-control" id="rejectCommentBox" rows="3"
                                      placeholder="Please provide a reason for rejecting this application..."></textarea>
                            <button type="button" class="btn btn-danger mt-2 w-100" id="confirmRejectBtn">Confirm Rejection</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Approve Application Modal -->
<div class="modal fade" id="approveApplicationModal" tabindex="-1" aria-labelledby="approveApplicationModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="approveApplicationModalLabel">Approve Application</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group mb-3">
                    <label for="approveTitle" class="form-label">Title</label>
                    <input type="text" class="form-control" id="approveTitle" placeholder="Application Approved">
                </div>
                <div class="form-group">
                    <label for="approveDescription" class="form-label">Comments</label>
                    <textarea class="form-control" id="approveDescription" rows="4"
                        placeholder="Add any comments about the approval..."></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirmApproveBtn">Approve Application</button>
            </div>
        </div>
    </div>
</div>

<!-- Reject Confirmation Modal -->
<div class="modal fade" id="rejectConfirmModal" tabindex="-1" aria-labelledby="rejectConfirmModalLabel"
    aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="rejectConfirmModalLabel">Confirm Rejection</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to reject this loan application?</p>
                <p><strong>Reason:</strong> <span id="rejectCommentPreview"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="finalRejectBtn">Confirm Rejection</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal for document preview -->
<div class="modal fade" id="docPreviewModal" tabindex="-1" aria-labelledby="docPreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="docPreviewModalLabel">Document Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="docPreviewBody" style="min-height:60vh;">
                <!-- Content will be injected here -->
            </div>
        </div>
    </div>
</div>

<!-- Hidden fields for JavaScript -->
<input type="hidden" id="loanIdField" value="@Model.LoanID" />
<input type="hidden" id="rejectUrlField" value="@Url.Action("RejectApplication", "ApproverApplicationDetails")" />
<input type="hidden" id="approveUrlField" value="@Url.Action("ApproveApplication", "ApproverApplicationDetails")" />
@Html.AntiForgeryToken()

@section Scripts {
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Ensure Bootstrap is loaded
            if (typeof bootstrap === 'undefined') {
                console.error('Bootstrap is not loaded. Make sure bootstrap.bundle.min.js is included.');
                return;
            }

            // Document preview
            const docPreviewModalElement = document.getElementById('docPreviewModal');
            if (docPreviewModalElement) {
                const previewModal = new bootstrap.Modal(docPreviewModalElement);
                document.querySelectorAll('.doc-view-btn').forEach(btn => {
                    btn.addEventListener('click', function () {
                        const url = this.getAttribute('data-doc-url');
                        const type = this.getAttribute('data-doc-type');
                        const name = this.getAttribute('data-doc-name');
                        let content = '';

                        if (type.toLowerCase().includes('pdf')) {
                            content = `<iframe src="${url}" width="100%" height="500px" style="border:none;"></iframe>`;
                        } else if (type.toLowerCase().includes('image')) {
                            content = `<img src="${url}" alt="${name}" class="img-fluid" />`;
                        } else {
                            content = `<a href="${url}" target="_blank">Download/Open Document</a>`;
                        }

                        document.getElementById('docPreviewModalLabel').textContent = name;
                        document.getElementById('docPreviewBody').innerHTML = content;
                        previewModal.show();
                    });
                });
            }

            // Approve Application functionality
            const approveBtn = document.getElementById('approveApplicationBtn');
            const approveModal = new bootstrap.Modal(document.getElementById('approveApplicationModal'));
            const confirmApproveBtn = document.getElementById('confirmApproveBtn');

            if (approveBtn) {
                approveBtn.addEventListener('click', function () {
                    const loanId = document.getElementById('loanIdField').value;
                    const approveUrl = document.getElementById('approveUrlField').value;

                    // First check if this is the final approval
                    fetch(`@Url.Action("CheckIfFinalApprover", "ApproverApplicationDetails")?loanId=${loanId}`, {
                        method: 'GET',
                        headers: {
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                if (data.isFinalApprover) {
                                    // Final approver - show modal for title and description
                                    document.getElementById('approveTitle').value = 'Application Approved';
                                    document.getElementById('approveDescription').value = '';
                                    approveModal.show();
                                } else {
                                    // Not final approver - approve immediately without modal
                                    approveApplicationImmediately(loanId, approveUrl);
                                }
                            } else {
                                alert('Error checking approval status: ' + data.message);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while checking approval status.');
                        });
                });
            }

            // Function to approve immediately without modal
            function approveApplicationImmediately(loanId, approveUrl) {
                approveBtn.disabled = true;
                approveBtn.textContent = 'Processing...';

                fetch(approveUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({
                        LoanId: parseInt(loanId),
                        Title: '',
                        Description: ''
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(data.message);
                            location.reload();
                        } else {
                            alert('Error: ' + data.message);
                            approveBtn.disabled = false;
                            approveBtn.textContent = 'Approve Application';
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while approving the application.');
                        approveBtn.disabled = false;
                        approveBtn.textContent = 'Approve Application';
                    });
            }

            if (confirmApproveBtn) {
                confirmApproveBtn.addEventListener('click', function () {
                    const loanId = document.getElementById('loanIdField').value;
                    const title = document.getElementById('approveTitle').value.trim();
                    const description = document.getElementById('approveDescription').value.trim();
                    const approveUrl = document.getElementById('approveUrlField').value;

                    confirmApproveBtn.disabled = true;
                    confirmApproveBtn.textContent = 'Processing...';

                    fetch(approveUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        },
                        body: JSON.stringify({
                            LoanId: parseInt(loanId),
                            Title: title,
                            Description: description
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                approveModal.hide();
                                alert(data.message);
                                location.reload();
                            } else {
                                alert('Error: ' + data.message);
                                confirmApproveBtn.disabled = false;
                                confirmApproveBtn.textContent = 'Approve Application';
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while approving the application.');
                            confirmApproveBtn.disabled = false;
                            confirmApproveBtn.textContent = 'Approve Application';
                        });
                });
            }

            // Reject Application functionality
            const rejectBtn = document.getElementById('rejectApplicationBtn');
            const rejectCommentContainer = document.getElementById('rejectCommentContainer');
            const confirmRejectBtn = document.getElementById('confirmRejectBtn');
            const rejectCommentBox = document.getElementById('rejectCommentBox');
            const rejectConfirmModal = new bootstrap.Modal(document.getElementById('rejectConfirmModal'));
            const rejectCommentPreview = document.getElementById('rejectCommentPreview');

            if (rejectBtn) {
                rejectBtn.addEventListener('click', function () {
                    rejectCommentContainer.style.display = 'block';
                    rejectCommentBox.focus();
                });
            }

            if (confirmRejectBtn) {
                confirmRejectBtn.addEventListener('click', function () {
                    const comment = rejectCommentBox.value.trim();
                    rejectCommentPreview.textContent = comment.length > 0 ? comment : "(No comment provided)";
                    rejectConfirmModal.show();
                });
            }

            // Final reject action
            const finalRejectBtn = document.getElementById('finalRejectBtn');
            if (finalRejectBtn) {
                finalRejectBtn.addEventListener('click', function () {
                    const loanId = document.getElementById('loanIdField').value;
                    const remarks = document.getElementById('rejectCommentBox').value.trim();
                    const rejectUrl = document.getElementById('rejectUrlField').value;

                    fetch(rejectUrl, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                        },
                        body: `id=${encodeURIComponent(loanId)}&remarks=${encodeURIComponent(remarks)}`
                    })
                        .then(response => {
                            if (response.redirected) {
                                window.location.href = response.url;
                            } else {
                                location.reload();
                            }
                        });
                    rejectConfirmModal.hide();
                });
            }
        });
    </script>
}
