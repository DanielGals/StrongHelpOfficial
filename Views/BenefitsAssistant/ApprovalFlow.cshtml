@model BenefitsAssistantApplicationDetailsViewModel
@{
    ViewData["Title"] = "Approval Flow";
    ViewBag.IdParamName = "id";
    ViewBag.LoanID = Model.LoanID;
    ViewBag.Status = Model.ApplicationStatus;
    ViewBag.TabArea = "";
}
@section Styles {
    <link rel="stylesheet" href="~/css/LoanApplicationDetails.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/MyApplication.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/BenefitsAssistantApprovalFLow.css" asp-append-version="true" />
}
<div class="row">
    <div class="col-md-8">
        <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
            <div>
                <h2 class="fw-bold mb-1">Approval Flow</h2>
                <div class="text-muted mb-2" style="font-size:1em;">Current Status and details of your application</div>
            </div>
        </div>
        @{
            ViewBag.LoanID = Model.LoanID;
            ViewBag.Status = Model.ApplicationStatus;
        }
        @await Html.PartialAsync("_LoanApplicationTabs")

        <div class="form-section">
            <label class="form-label-custom required-field">Loan Title</label>
            <input type="text" class="form-control" id="loanTitle" name="loanTitle" placeholder="Enter loan title" required />
        </div>

        <div class="form-section">
            <label class="form-label-custom required-field">Message to approvers</label>
            <textarea class="form-control message-textarea" id="messageToApprovers" name="messageToApprovers" rows="6" placeholder="Enter your message to approvers..." required></textarea>
        </div>

        <!-- 3. Application Sequence Section -->
        <div class="form-section">
            <div class="fw-bold mb-3" style="font-size: 1.2em;">Application Sequence</div>

            <!-- Approval Cards Container -->
            <div id="approvalCardsContainer"></div>

            <button type="button" class="btn btn-add-approver" onclick="openModal()">
                <svg width="20" height="20" viewBox="0 0 20 20" style="margin-right: 0.5rem;">
                    <circle cx="10" cy="10" r="9" fill="none" stroke="white" stroke-width="2" />
                    <line x1="10" y1="5" x2="10" y2="15" stroke="white" stroke-width="2" />
                    <line x1="5" y1="10" x2="15" y2="10" stroke="white" stroke-width="2" />
                </svg>
                Add Approver
            </button>
        </div>

    </div>

    <div class="col-md-4">
        @await Html.PartialAsync("_ApplicationDecisionAndChecklist.cshtml", Model)
    </div>
</div>

<!-- Modal -->
<div id="approverModal" class="modal-backdrop-custom">
    <div class="modal-content-custom">
        <div class="modal-header-custom">
            <h3 class="mb-2">Set Workflow</h3>
            <h5 class="text-muted mb-0">Approver Information</h5>
        </div>
        <div class="modal-body-custom">
            <!-- Phase Order -->
            <div class="form-group order-selection">
                <label class="form-label">Order</label>
                <select class="form-select" id="phaseOrderField"></select>
            </div>

            <!-- Role -->
            <div class="form-group">
                <label class="form-label">Role</label>
                <select class="form-select" id="roleSelect" onchange="handleRoleChange()">
                    <option value="">Select a role...</option>
                </select>
            </div>

            <!-- Approver (shows after role is selected) -->
            <div class="form-group" id="approverDropdownGroup">
                <label class="form-label">Approver</label>
                <select class="form-select" id="approverSelect" onchange="handleApproverChange()">
                    <option value="">Select an approver...</option>
                </select>
            </div>

            <!-- Email -->
            <div class="form-group">
                <label class="form-label">Email</label>
                <input type="email" class="form-control" id="emailField" placeholder="email@company.com" disabled>
            </div>

            <!-- Description -->
            <div class="form-group">
                <label class="form-label">Description</label>
                <textarea class="form-control description-textarea" id="descriptionField" placeholder="Enter description..."></textarea>
            </div>
        </div>
        <div class="modal-footer-custom">
            <button type="button" class="btn-cancel" onclick="closeModal()">Cancel</button>
            <button type="button" class="btn-save" onclick="saveApprover()">Save</button>
        </div>
    </div>
</div>

<div id="confirmationModal" class="modal-backdrop-custom">
    <div class="modal-content-custom">
        <div class="modal-header-custom">
            <h3 class="mb-2">Confirm Forward Application</h3>
            <h5 class="text-muted mb-0">Please review the details before proceeding</h5>
        </div>
        <div class="modal-body-custom">
            <div class="alert-yellow">
                <div class="icon">⚠️</div>
                <div>
                    <strong>Warning:</strong> This action cannot be undone. The application will be forwarded to the selected approvers and the status will be updated to "In Review".
                </div>
            </div>

            <div class="confirmation-details">
                <div class="confirmation-item">
                    <label class="form-label">Loan Title:</label>
                    <div class="confirmation-value" id="confirmLoanTitle"></div>
                </div>

                <div class="confirmation-item">
                    <label class="form-label">Message to Approvers:</label>
                    <div class="confirmation-value" id="confirmMessage"></div>
                </div>

                <div class="confirmation-item">
                    <label class="form-label">Number of Approvers:</label>
                    <div class="confirmation-value" id="confirmApproversCount"></div>
                </div>

                <div class="confirmation-item">
                    <label class="form-label">Approval Sequence:</label>
                    <div class="confirmation-value" id="confirmApproversList"></div>
                </div>
            </div>
        </div>
        <div class="modal-footer-custom">
            <button type="button" class="btn-cancel" onclick="closeConfirmationModal()">Cancel</button>
            <button type="button" class="btn-save" id="confirmForwardBtn" onclick="proceedWithForward()">Forward Application</button>
        </div>
    </div>
</div>

<input type="hidden" id="loanIdField" value="@Model.LoanID" />
<input type="hidden" id="rejectUrlField" value="@Url.Action("RejectApplication", "BenefitsAssistantApplicationDetails")" />

@section Scripts {
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/BenefitsAssistantApprovalFlow.js" asp-append-version="true"></script>
    <script>

        document.getElementById('loanIdField').value = @Model.LoanID;
        document.addEventListener('DOMContentLoaded', function() {
            const checklistItemsContainer = document.getElementById('checklistItemsContainer');
            const forwardBtn = document.getElementById('forwardApplicationBtn');

                const rejectBtn = document.getElementById('rejectApplicationBtn');
        if (rejectBtn) {
            const rejectCommentContainer = document.getElementById('rejectCommentContainer');
            const confirmRejectBtn = document.getElementById('confirmRejectBtn');
            const rejectCommentBox = document.getElementById('rejectCommentBox');
            const rejectConfirmModal = new bootstrap.Modal(document.getElementById('rejectConfirmModal'));
            const rejectCommentPreview = document.getElementById('rejectCommentPreview');

            rejectBtn.addEventListener('click', function () {
                rejectCommentContainer.style.display = 'block';
                rejectCommentBox.focus();
            });

            confirmRejectBtn.addEventListener('click', function () {
                const comment = rejectCommentBox.value.trim();
                rejectCommentPreview.textContent = comment.length > 0 ? comment : "(No comment provided)";
                rejectConfirmModal.show();
            });

            // Reject action handler
            document.getElementById('finalRejectBtn').addEventListener('click', function () {
                const loanId = document.getElementById('loanIdField').value;
                const remarks = document.getElementById('rejectCommentBox').value.trim();
                const rejectUrl = document.getElementById('rejectUrlField').value;

                fetch(rejectUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: `id=${encodeURIComponent(loanId)}&remarks=${encodeURIComponent(remarks)}`
                })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    } else {
                        location.reload();
                    }
                });
                rejectConfirmModal.hide();
            });
        }

            const addItemBtn = document.getElementById('addItemBtn');
            if (addItemBtn) {
                addItemBtn.addEventListener('click', function() {
                    const addChecklistItemModal = new bootstrap.Modal(document.getElementById('addChecklistItemModal'));
                    const conditionTextInput = document.getElementById('conditionTextInput');
                    if (conditionTextInput) {
                        conditionTextInput.value = '';
                    }
                    addChecklistItemModal.show();
                });
            }

            // Handle the confirmation of adding a new checklist item
            const confirmAddChecklistBtn = document.getElementById('confirmAddChecklistBtn');
            if (confirmAddChecklistBtn) {
                confirmAddChecklistBtn.addEventListener('click', function() {
                    const conditionTextInput = document.getElementById('conditionTextInput');
                    const text = conditionTextInput.value.trim();
                    if (text.length > 0) {
                        const id = 'checklist_' + Date.now();
                        const div = document.createElement('div');
                        div.className = 'form-check mb-2';
                        div.innerHTML = `<div class="form-check mb-2 d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center flex-grow-1">
                                <input class="form-check-input" type="checkbox" id="${id}">
                                <label class="form-check-label checklist-item ms-2" for="${id}">${text}</label>
                            </div>
                            <button type="button" class="btn btn-link btn-sm text-danger ms-2 checklist-remove-btn" title="Remove item" style="padding:0 0.25rem;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" fill="none" stroke="currentColor" class="feather feather-trash" viewBox="0 0 24 24">
                                    <polyline points="3 6 5 6 21 6" />
                                    <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6" />
                                    <path d="M10 11v6" />
                                    <path d="M14 11v6" />
                                    <path d="M9 6V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2" />
                                </svg>
                            </button>
                        </div>`;
                        checklistItemsContainer.appendChild(div);
                        bootstrap.Modal.getInstance(document.getElementById('addChecklistItemModal')).hide();
                        updateForwardButtonState();
                    } else {
                        conditionTextInput.focus();
                    }
                });
            }

            // Handle the fill pre-existing checklist button
            const fillPreexistingChecklistBtn = document.getElementById('fillPreexistingChecklistBtn');
            if (fillPreexistingChecklistBtn) {
                fillPreexistingChecklistBtn.addEventListener('click', function() {
                    const checklistItems = [
                        'No existing active loans',
                        'Not a co-maker for another active loan',
                        'No derogatory legal records (civil/criminal cases)'
                    ];

                    // Clear existing items
                    checklistItemsContainer.innerHTML = '';

                    // Add pre-existing items
                    checklistItems.forEach((item, index) => {
                        const id = 'checklist_' + Date.now() + '_' + index;
                        const div = document.createElement('div');
                        div.className = 'form-check mb-2';
                        div.innerHTML = `<div class="form-check mb-2 d-flex align-items-center justify-content-between">
                            <div class="d-flex align-items-center flex-grow-1">
                                <input class="form-check-input" type="checkbox" id="${id}">
                                <label class="form-check-label checklist-item ms-2" for="${id}">${item}</label>
                            </div>
                            <button type="button" class="btn btn-link btn-sm text-danger ms-2 checklist-remove-btn" title="Remove item" style="padding:0 0.25rem;">
                                <svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" fill="none" stroke="currentColor" class="feather feather-trash" viewBox="0 0 24 24">
                                    <polyline points="3 6 5 6 21 6" />
                                    <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6" />
                                    <path d="M10 11v6" />
                                    <path d="M14 11v6" />
                                    <path d="M9 6V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2" />
                                </svg>
                            </button>
                        </div>`;
                        checklistItemsContainer.appendChild(div);
                    });

                    bootstrap.Modal.getInstance(document.getElementById('addChecklistItemModal')).hide();
                    updateForwardButtonState();
                });
            }

            if (checklistItemsContainer) {
                const checklistItems = [
                    'No existing active loans',
                    'Not a co-maker for another active loan',
                    'No derogatory legal records (civil/criminal cases)'
                ];

                checklistItems.forEach((item, index) => {
                    const id = 'checklist_' + Date.now() + '_' + index;
                    const div = document.createElement('div');
                    div.className = 'form-check mb-2';
                    div.innerHTML = `<div class="form-check mb-2 d-flex align-items-center justify-content-between">
                                <div class="d-flex align-items-center flex-grow-1">
                                    <input class="form-check-input" type="checkbox" id="${id}">
                                    <label class="form-check-label checklist-item ms-2" for="${id}">${item}</label>
                                </div>
                                <button type="button" class="btn btn-link btn-sm text-danger ms-2 checklist-remove-btn" title="Remove item" style="padding:0 0.25rem;">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" fill="none" stroke="currentColor" class="feather feather-trash" viewBox="0 0 24 24">
                                        <polyline points="3 6 5 6 21 6" />
                                        <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6" />
                                        <path d="M10 11v6" />
                                        <path d="M14 11v6" />
                                        <path d="M9 6V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2" />
                                    </svg>
                                </button>
                            </div>`;
                    checklistItemsContainer.appendChild(div);
                });

                function updateForwardButtonState() {
                    const checkboxes = checklistItemsContainer.querySelectorAll('input[type="checkbox"]');
                    if (checkboxes.length === 0 || !forwardBtn) {
                        return;
                    }
                    forwardBtn.disabled = !Array.from(checkboxes).every(cb => cb.checked);
                }

                checklistItemsContainer.addEventListener('change', function (e) {
                    if (e.target && e.target.type === 'checkbox') {
                        updateForwardButtonState();
                    }
                });

                checklistItemsContainer.addEventListener('click', function (e) {
                    if (e.target.closest('.checklist-remove-btn')) {
                        const btn = e.target.closest('.checklist-remove-btn');
                        btn.parentElement.parentElement.remove();
                        updateForwardButtonState();
                    }
                });

                updateForwardButtonState();
            }
        });
    </script>
}
