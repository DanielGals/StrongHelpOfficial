@model BenefitsAssistantApplicationDetailsViewModel
@{
    ViewData["Title"] = "Loan Application Details";
    ViewBag.LoanID = Model.LoanID; 
    ViewBag.Status = Model.ApplicationStatus; 
    ViewBag.TabArea = ""; 
    ViewBag.IdParamName = "id"; 
}

@section Styles {
    <link rel="stylesheet" href="~/css/LoanApplicationDetails.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/MyApplication.css" asp-append-version="true" />
    <style>
        .subtitle-green {
        color: #198754;
        font-size: 1.1em;
        margin-bottom: 0.5rem;
        }

        .alert-yellow {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
        border-radius: 0.25rem;
        padding: 1rem;
        display: flex;
        align-items: flex-start;
        margin-bottom: 1rem;
        }

        .alert-yellow .icon {
        margin-right: 0.75rem;
        font-size: 1.5em;
        flex-shrink: 0;
        }

        .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        }

        .btn-burger {
        width: 100%;
        font-weight: 600;
        padding: 0.75rem 1rem;
        font-size: 1.1em;
        }

        .btn-outline-danger {
        border-width: 2px;
        }
        /* Validation checklist item styles */
        .checklist-item {
        font-size: 1.2em;
        color: #198754;
        display: flex;
        align-items: center;
        }

        .checklist-item .form-check-input {
        width: 1.5em;
        height: 1.5em;
        margin-right: 0.75em;
        }
    </style>
}

        <div class="d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center mb-4">
            <div>
                <h2 class="fw-bold mb-1">Loan Application Details</h2>
                <div class="text-muted mb-2" style="font-size:1em;">Current Status and details of your application</div>
            </div>
        </div>

        @await Html.PartialAsync("_LoanApplicationTabs")

        <div class="row mb-3">
            <div class="col-md-6 mb-2">
                <div class="loan-details-label">Employee Name</div>
                <div>@Model.EmployeeName</div>
            </div>
            <div class="col-md-6 mb-2">
                <div class="loan-details-label">Amount Applied For</div>
                <div>₱@Model.LoanAmount.ToString("N0")</div>
            </div>
            <div class="col-md-6 mb-2">
                <div class="loan-details-label">Department</div>
                <div>@Model.Department</div>
            </div>
            <div class="col-md-6 mb-2">
                <div class="loan-details-label">Payroll Account Number</div>
                <div>@Model.PayrollAccountNumber</div>
            </div>
        </div>
        <hr />

        <h5 class="fw-bold mb-3">Documents Submitted</h5>
        @if (Model.Documents != null && Model.Documents.Any())
        {
            foreach (var doc in Model.Documents)
            {
                <div class="loan-details-document">
                    <div>
                        <div class="doc-title">@doc.Name</div>
                        <div class="doc-type">@doc.Type</div>
                    </div>
                    <button type="button"
                    class="btn btn-light doc-view-btn"
                    data-doc-url="@Url.Action("Preview", "Document", new { area = "Loaner", id = doc.LoanDocumentID })"
                    data-doc-type="@doc.Type"
                    data-doc-name="@doc.Name">
                        View
                    </button>
                </div>
            }
        }
        else
        {
            <div class="alert alert-info">No documents submitted.</div>
        }

<!-- Modal for document preview -->
<div class="modal fade" id="docPreviewModal" tabindex="-1" aria-labelledby="docPreviewModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="docPreviewModalLabel">Document Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="docPreviewBody" style="min-height:60vh;">
                <!-- Content will be injected here -->
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Document preview
            const previewModal = new bootstrap.Modal(document.getElementById('docPreviewModal'));
            document.querySelectorAll('.doc-view-btn').forEach(btn => {
                btn.addEventListener('click', function () {
                    const url = this.getAttribute('data-doc-url');
                    const type = this.getAttribute('data-doc-type');
                    const name = this.getAttribute('data-doc-name');
                    let content = '';

                    if (type.toLowerCase().includes('pdf')) {
                        content = `<iframe src="${url}" width="100%" height="500px" style="border:none;"></iframe>`;
                    } else if (type.toLowerCase().includes('image')) {
                        content = `<img src="${url}" alt="${name}" class="img-fluid" />`;
                    } else {
                        content = `<a href="${url}" target="_blank">Download/Open Document</a>`;
                    }

                    document.getElementById('docPreviewModalLabel').textContent = name;
                    document.getElementById('docPreviewBody').innerHTML = content;
                    previewModal.show();
                });
            });
            // Checklist add item modal logic
            const addItemBtn = document.getElementById('addItemBtn');
            const checklistItemsContainer = document.getElementById('checklistItemsContainer');
            const forwardBtn = document.getElementById('forwardApplicationBtn');

            let addChecklistItemModal = null;
            let confirmAddChecklistBtn = null;
            let conditionTextInput = null;

            addItemBtn.addEventListener('click', function () {
                if (!addChecklistItemModal) {
                    addChecklistItemModal = new bootstrap.Modal(document.getElementById('addChecklistItemModal'));
                    confirmAddChecklistBtn = document.getElementById('confirmAddChecklistBtn');
                    conditionTextInput = document.getElementById('conditionTextInput');
                }
                conditionTextInput.value = '';
                addChecklistItemModal.show();
            });

            // Function to check if all checklist checkboxes are checked
            function updateRejectButtonState() {
                const checkboxes = checklistItemsContainer.querySelectorAll('input[type="checkbox"]');
                if (checkboxes.length === 0) {
                    forwardBtn.disabled = true;
                    return;
                }
                forwardBtn.disabled = !Array.from(checkboxes).every(cb => cb.checked);
            }

            // Listen for changes on checklist checkboxes
            checklistItemsContainer.addEventListener('change', function (e) {
                if (e.target && e.target.type === 'checkbox') {
                    updateRejectButtonState();
                }
            });

            // Remove checklist item logic
            checklistItemsContainer.addEventListener('click', function (e) {
                if (e.target.closest('.checklist-remove-btn')) {
                    const btn = e.target.closest('.checklist-remove-btn');
                    btn.parentElement.parentElement.remove();
                    updateRejectButtonState();
                }
            });

            // Confirm add checklist item
            document.getElementById('confirmAddChecklistBtn').addEventListener('click', function () {
                if (!conditionTextInput) {
                    conditionTextInput = document.getElementById('conditionTextInput');
                }
                const text = conditionTextInput.value.trim();
                if (text.length > 0) {
                    const id = 'checklist_' + Date.now();
                    const div = document.createElement('div');
                    div.className = 'form-check mb-2';
                    div.innerHTML = `<div class="form-check mb-2 d-flex align-items-center justify-content-between">
                                        <div class="d-flex align-items-center flex-grow-1">
                                            <input class="form-check-input" type="checkbox" id="${id}">
                                            <label class="form-check-label checklist-item ms-2" for="${id}">${text}</label>
                                        </div>
                                        <button type="button" class="btn btn-link btn-sm text-danger ms-2 checklist-remove-btn" title="Remove item" style="padding:0 0.25rem;">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" fill="none" stroke="currentColor" class="feather feather-trash" viewBox="0 0 24 24">
                                                <polyline points="3 6 5 6 21 6" />
                                                <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6" />
                                                <path d="M10 11v6" />
                                                <path d="M14 11v6" />
                                                <path d="M9 6V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2" />
                                            </svg>
                                        </button>
                                    </div>`;
                    checklistItemsContainer.appendChild(div);
                    addChecklistItemModal.hide();
                    updateRejectButtonState();
                } else {
                    conditionTextInput.focus();
                }
            });

            document.getElementById('fillPreexistingChecklistBtn').addEventListener('click', function () {
                if (!conditionTextInput) {
                    conditionTextInput = document.getElementById('conditionTextInput');
                }
                    for(let i = 0; i<3; i++){
                        const id = 'checklist_' + Date.now();
                        const div = document.createElement('div');
                        div.className = 'form-check mb-2';
                        if(i===0){
                            div.innerHTML = `<div class="form-check mb-2 d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center flex-grow-1">
                                                <input class="form-check-input" type="checkbox" id="checklist_1">
                                                <label class="form-check-label checklist-item ms-2" for="checklist_1">No existing active loans</label>
                                            </div>
                                            <button type="button" class="btn btn-link btn-sm text-danger ms-2 checklist-remove-btn" title="Remove item" style="padding:0 0.25rem;">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" fill="none" stroke="currentColor" class="feather feather-trash" viewBox="0 0 24 24">
                                                    <polyline points="3 6 5 6 21 6" />
                                                    <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6" />
                                                    <path d="M10 11v6" />
                                                    <path d="M14 11v6" />
                                                    <path d="M9 6V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2" />
                                                </svg>
                                            </button>
                                        </div>`;
                            checklistItemsContainer.appendChild(div);
                        }
                        else if(i===1){
                            div.innerHTML = `<div class="form-check mb-2 d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center flex-grow-1">
                                                <input class="form-check-input" type="checkbox" id="checklist_2">
                                                <label class="form-check-label checklist-item ms-2" for="checklist_2">Not a co-maker for another active loan</label>
                                            </div>
                                            <button type="button" class="btn btn-link btn-sm text-danger ms-2 checklist-remove-btn" title="Remove item" style="padding:0 0.25rem;">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" fill="none" stroke="currentColor" class="feather feather-trash" viewBox="0 0 24 24">
                                                    <polyline points="3 6 5 6 21 6" />
                                                    <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6" />
                                                    <path d="M10 11v6" />
                                                    <path d="M14 11v6" />
                                                    <path d="M9 6V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2" />
                                                </svg>
                                            </button>
                                        </div>`;
                            checklistItemsContainer.appendChild(div);
                        }
                        else if(i===2){
                            div.innerHTML = `<div class="form-check mb-2 d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center flex-grow-1">
                                                <input class="form-check-input" type="checkbox" id="checklist_3">
                                                <label class="form-check-label checklist-item ms-2" for="checklist_3">No derogatory legal records (civil/criminal cases)</label>
                                            </div>
                                            <button type="button" class="btn btn-link btn-sm text-danger ms-2 checklist-remove-btn" title="Remove item" style="padding:0 0.25rem;">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="1.2em" height="1.2em" fill="none" stroke="currentColor" class="feather feather-trash" viewBox="0 0 24 24">
                                                    <polyline points="3 6 5 6 21 6" />
                                                    <path d="M19 6l-1 14a2 2 0 0 1-2 2H8a2 2 0 0 1-2-2L5 6" />
                                                    <path d="M10 11v6" />
                                                    <path d="M14 11v6" />
                                                    <path d="M9 6V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2" />
                                                </svg>
                                            </button>
                                        </div>`;
                            checklistItemsContainer.appendChild(div);
                        }

                    }

                    addChecklistItemModal.hide();
                    updateRejectButtonState();
            });

            // Initial state
            updateRejectButtonState();

            // Reject Application button logic
            const rejectBtn = document.getElementById('rejectApplicationBtn');
            const rejectCommentContainer = document.getElementById('rejectCommentContainer');
            const confirmRejectBtn = document.getElementById('confirmRejectBtn');
            const rejectCommentBox = document.getElementById('rejectCommentBox');
            const rejectConfirmModal = new bootstrap.Modal(document.getElementById('rejectConfirmModal'));
            const rejectCommentPreview = document.getElementById('rejectCommentPreview');

            rejectBtn.addEventListener('click', function () {
                rejectCommentContainer.style.display = 'block';
                rejectCommentBox.focus();
            });

            confirmRejectBtn.addEventListener('click', function () {
                const comment = rejectCommentBox.value.trim();
                rejectCommentPreview.textContent = comment.length > 0 ? comment : "(No comment provided)";
                rejectConfirmModal.show();
            });

            // Optionally, handle the final reject action here
            document.getElementById('finalRejectBtn').addEventListener('click', function () {
                const loanId = @Model.LoanID;
                const remarks = document.getElementById('rejectCommentBox').value.trim();

                fetch('@Url.Action("RejectApplication", "BenefitsAssistantApplicationDetails")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // if using antiforgery
                    },
                    body: `id=${encodeURIComponent(loanId)}&remarks=${encodeURIComponent(remarks)}`
                })
                .then(response => {
                    if (response.redirected) {
                        window.location.href = response.url;
                    } else {
                        location.reload();
                    }
                });
                rejectConfirmModal.hide();
                // Optionally, disable buttons or show a message
            });
        });
    </script>
}
