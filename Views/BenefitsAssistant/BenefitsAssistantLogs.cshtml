@model StrongHelpOfficial.Models.BenefitsAssistantLogsViewModel
@{
    ViewData["Title"] = "Activity Logs";
    Layout = "~/Views/Shared/_Layout.cshtml";

    //Store whether we're filtering and if we found results
    bool isFiltering = !string.IsNullOrEmpty(Model.FilterBy) || Model.FilterDate.HasValue;
    bool hasFilteredResults = Model.Logs.Any();

    //Calculate pagination values
    int start = ((Model.CurrentPage - 1) * Model.PageSize) + (Model.TotalItems == 0 ? 0 : 1);
    int end = Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems);
}

@section Styles {
    <link rel="stylesheet" href="~/css/BenefitsAssistantDashboard.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/MyApplication.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/BenefitsAssistantLogs.css" asp-append-version="true" />
}

<!-- Toast notification container -->
<div class="toast-container">
    <div id="filterToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="5000">
        <div class="toast-header">
            <strong class="me-auto">Filter Results</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            <span id="toastMessage"></span>
        </div>
    </div>
</div>

<div class="logs-header mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h2 class="fw-bold mb-1">Activity Logs</h2>
            <p class="text-muted">View your activity history related to loan application processing</p>
        </div>
        <button class="filter-date-btn" data-bs-toggle="modal" data-bs-target="#dateFilterModal">
            <i class="bi bi-calendar"></i> Filter by Date
        </button>
    </div>
</div>

<!-- Active filters display -->
@if (isFiltering)
{
    <div class="active-filters">
        @if (!string.IsNullOrEmpty(Model.FilterBy))
        {
            <span class="filter-badge">
                Status: @Model.FilterBy
                <a href="@Url.Action("Index", new { filterDate = Model.FilterDate, page = 1 })" class="filter-remove"><i class="bi bi-x"></i></a>
            </span>
        }
        @if (Model.FilterDate.HasValue)
        {
            <span class="filter-badge">
                Date: @Model.FilterDate.Value.ToString("yyyy-MM-dd")
                <a href="@Url.Action("Index", new { filterBy = Model.FilterBy, page = 1 })" class="filter-remove"><i class="bi bi-x"></i></a>
            </span>
        }
        <a href="@Url.Action("Index")" class="reset-filters">Reset all filters</a>
    </div>
}

<div class="search-row">
    <div class="search-input">
        <div class="input-group">
            <span class="input-group-text bg-white border-end-0">
                <i class="bi bi-search"></i>
            </span>
            <input type="text" id="searchLogs" class="form-control border-start-0" placeholder="Search logs..." />
        </div>
    </div>
    <div class="search-actions">
        <div class="dropdown">
            <form method="get" id="statusFilterForm">
                <input type="hidden" name="filterBy" id="filterByInput" value="@(Model.FilterBy ?? "")" />
                @if (Model.FilterDate.HasValue)
                {
                    <input type="hidden" name="filterDate" value="@Model.FilterDate.Value.ToString("yyyy-MM-dd")" />
                }
                <input type="hidden" name="page" value="1" />

                <button class="filter-status-btn dropdown-toggle" type="button" id="statusDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    <span>@(string.IsNullOrEmpty(Model.FilterBy) ? "All Actions" : Model.FilterBy)</span>
                    <i class="bi bi-chevron-down"></i>
                </button>
                <ul class="dropdown-menu" aria-labelledby="statusDropdown">
                    <li><a class="dropdown-item" href="#" data-value="">All Actions</a></li>
                    <li><a class="dropdown-item" href="#" data-value="In Review">In Review</a></li>
                    <li><a class="dropdown-item" href="#" data-value="Approved">Approved</a></li>
                    <li><a class="dropdown-item" href="#" data-value="Rejected">Rejected</a></li>
                </ul>
            </form>
        </div>
    </div>
</div>

<div class="all-logs-box mb-4">
    <div class="card myapp-card-body">
        <div class="card-body">
            <h5 class="fw-semibold mb-2">Activity Logs</h5>
            <p class="text-muted" style="font-size: 0.95em;">Review your recent activities on loan applications</p>

            <div class="table-responsive">
                <table class="table align-middle mb-0">
                    <thead>
                        <tr>
                            <th>Timestamp</th>
                            <th>Action</th>
                            <th>Application ID</th>
                            <th>Details</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.Logs.Any())
                        {
                            foreach (var log in Model.Logs)
                            {
                                string actionClass = log.Action.Trim() switch
                                {
                                    "Approved" => "action-badge approved",
                                    "Rejected" => "action-badge rejected",
                                    "In Review" => "action-badge inreview",
                                    _ => "action-badge"
                                };

                                <tr>
                                    <td>@log.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                    <td>
                                        <span class="@actionClass">@log.Action</span>
                                    </td>
                                    <td>
                                        @{
                                            //Extract the numeric part from the Application ID string (format LOAN-XXXX)
                                            string applicationIdString = log.ApplicationID;
                                            int applicationId = 0;

                                            if (!string.IsNullOrEmpty(applicationIdString) && applicationIdString.Contains("-"))
                                            {
                                                string[] parts = applicationIdString.Split('-');
                                                if (parts.Length > 1)
                                                {
                                                    int.TryParse(parts[1], out applicationId);
                                                }
                                            }
                                        }
                                        <a href="@Url.Action("Index", "BenefitsAssistantApplicationDetails", new { id = applicationId })"
                                           class="application-link">
                                            @log.ApplicationID
                                        </a>
                                    </td>
                                    <td>@log.Details</td>
                                    <td>
                                        @{
                                            string normalizedStatus = log.Status.Trim();
                                            string statusClass = normalizedStatus switch
                                            {
                                                "In Review" => "status-badge status-inreview",
                                                "Approved" => "status-badge status-approved",
                                                "Rejected" => "status-badge status-rejected",
                                                _ => "status-badge"
                                            };
                                        }
                                        <span class="@statusClass">
                                            @normalizedStatus
                                        </span>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5" class="text-center py-4">
                                    <div class="alert alert-info mb-0">
                                        @if (isFiltering)
                                        {
                                            <div>
                                                <i class="bi bi-exclamation-circle me-2"></i>
                                                No activity logs found with the selected filters.
                                            </div>
                                            <div class="mt-2">
                                                <a href="@Url.Action("Index")" class="btn btn-sm btn-outline-primary">Clear filters</a>
                                            </div>
                                        }
                                        else
                                        {
                                            <span>No activity logs found.</span>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination controls below the table -->
            <div class="d-flex justify-content-between align-items-center mt-3">
                <div>
                    <span class="pagination-summary text-teal">
                        Showing <strong>@start</strong> to <strong>@end</strong> of <strong>@Model.TotalItems</strong> entries
                    </span>
                </div>
                <nav>
                    <ul class="pagination mb-0">
                        <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { filterBy = Model.FilterBy, filterDate = Model.FilterDate, page = Math.Max(1, Model.CurrentPage - 1) })">Previous</a>
                        </li>
                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { filterBy = Model.FilterBy, filterDate = Model.FilterDate, page = i })">@i</a>
                            </li>
                        }
                        <li class="page-item @(Model.CurrentPage == Model.TotalPages || Model.TotalPages == 0 ? "disabled" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { filterBy = Model.FilterBy, filterDate = Model.FilterDate, page = Math.Min(Model.TotalPages, Model.CurrentPage + 1) })">Next</a>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    </div>
</div>

<!-- Date Filter Modal -->
<div class="modal fade" id="dateFilterModal" tabindex="-1" aria-labelledby="dateFilterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="dateFilterModalLabel">Filter by Date</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form method="get" id="dateFilterForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="filterDate" class="form-label">Select Date</label>
                        <input type="date" class="form-control" id="filterDate" name="filterDate" value="@(Model.FilterDate?.ToString("yyyy-MM-dd"))">
                    </div>
                    @if (!string.IsNullOrEmpty(Model.FilterBy))
                    {
                        <input type="hidden" name="filterBy" value="@Model.FilterBy">
                    }
                    <input type="hidden" name="page" value="1">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Apply Filter</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/BenefitsAssistantLogs.js" asp-append-version="true"></script>
    @if (isFiltering && !hasFilteredResults)
    {
        <script>
            window.showFilterNoResultsToast = true;
        </script>
    }
}
