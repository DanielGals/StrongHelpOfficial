@model StrongHelpOfficial.Models.AdminUsersViewModel

@{
    ViewData["Title"] = "System Administrator";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var columns = new[] { "UserID", "Name", "Role", "Department" };
    string currentFilter = Model.CurrentFilter ?? "Name";
    string currentSearch = Model.CurrentSearch ?? "";
}

@section Styles {
    <link rel="stylesheet" href="~/css/AdminDashboard.css" asp-append-version="true" />
    <style>
        .table-fixed {
            table-layout: fixed;
            width: 100%;
        }
        .table-fixed th, .table-fixed td {
            word-wrap: break-word;
            white-space: normal;
        }
        .table-fixed th:nth-child(1), .table-fixed td:nth-child(1) { width: 10%; }
        .table-fixed th:nth-child(2), .table-fixed td:nth-child(2) { width: 30%; }
        .table-fixed th:nth-child(3), .table-fixed td:nth-child(3) { width: 25%; }
        .table-fixed th:nth-child(4), .table-fixed td:nth-child(4) { width: 25%; }
        .table-fixed th:nth-child(5), .table-fixed td:nth-child(5) { width: 10%; }
    </style>
}

<h2 class="fw-bold mb-1">User Management</h2>
<p class="text-muted">
    Manage user accounts and access permissions
</p>

<div class="d-flex justify-content-end mb-3">
    <a href="@Url.Action("Index", "AdminAddUser")" class="btn btn-primary">
        <i class="bi bi-person-plus"></i> Add User
    </a>
</div>

<div class="card my-4">
    <div class="card-body">
        <h4 class="card-title mb-1">All Users</h4>
        <p class="card-subtitle text-muted mb-0">
            Manage all user accounts in the system
        </p>
        <br />
        <!-- Search and Filter -->
        <form id="searchForm" method="get" class="d-flex align-items-center mb-3" autocomplete="off">
            <div class="input-group" style="max-width: 100%;">
                <select class="form-select" name="filter" id="filterSelect" style="max-width: 120px;">
                    @foreach (var col in columns)
                    {
                        <option value="@col" selected="@(col == currentFilter ? "selected" : null)">@col</option>
                    }
                </select>
                <input type="text" class="form-control flex-grow-1" name="search" id="searchInput" placeholder="Search..." value="@currentSearch" style="min-width:0;" />
            </div>
        </form>
        
        <!-- Users Table -->
        <div class="table-responsive">
            <table class="table table-hover align-middle table-fixed">
                <thead>
                    <tr>
                        <th>User ID</th>
                        <th>Name</th>
                        <th>Role</th>
                        <th>Department</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Users.Count == 0)
                    {
                        <tr>
                            <td colspan="5" class="text-center">No users found.</td>
                        </tr>
                    }
                    else
                    {
                        foreach (var user in Model.Users)
                        {
                            <tr>
                                <td>@user.UserID</td>
                                <td>@user.Name</td>
                                <td>@user.Role</td>
                                <td>@user.Department</td>
                                <td>
                                    <button class="btn-manage" onclick="location.href='@Url.Action("Index", "AdminManageUser", new { userId = user.UserID })'">Manage</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

        <!-- Table Footer: Showing count and Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-3">
            <div>
                <span>
                    Showing @((Model.CurrentPage - 1) * Model.PageSize + 1)
                    -
                    @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalUsers))
                    of @Model.TotalUsers users
                </span>
            </div>
            <nav>
                <ul class="pagination mb-0">
                    @{
                        int totalPages = Model.TotalPages;
                        int currentPage = Model.CurrentPage;
                        int maxPagesToShow = 5;
                        int startPage = Math.Max(1, currentPage - 2);
                        int endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);
                        if (endPage - startPage < maxPagesToShow - 1)
                        {
                            startPage = Math.Max(1, endPage - maxPagesToShow + 1);
                        }
                    }
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1, search = currentSearch, filter = currentFilter })" aria-label="Previous">
                            <span aria-hidden="true">&laquo; Previous</span>
                        </a>
                    </li>
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        <li class="page-item @(i == currentPage ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { page = i, search = currentSearch, filter = currentFilter })">@i</a>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1, search = currentSearch, filter = currentFilter })" aria-label="Next">
                            <span aria-hidden="true">Next &raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Submit search only on Enter key
        document.getElementById('searchInput').addEventListener('keydown', function (e) {
            if (e.key === 'Enter') {
                document.getElementById('searchForm').submit();
            }
        });
        document.getElementById('filterSelect').addEventListener('change', function () {
            // Blur the search input to avoid browser issues with form submission
            document.getElementById('searchInput').blur();
            // Use setTimeout to ensure the change event completes before submitting
            setTimeout(function () {
                document.getElementById('searchForm').submit();
            }, 0);
        });
    </script>
}